{"version":3,"sources":["components/Navbars.js","components/Home.js","App.js","serviceWorker.js","index.js"],"names":["Navbars","props","useState","isOpen","setIsOpen","Navbar","color","dark","expand","border","padding","NavbarToggler","onClick","Collapse","navbar","class","type","placeholder","name","icon","faSearch","NavbarBrand","href","className","style","marginLeft","id","faUser","Nav","UncontrolledDropdown","nav","DropdownToggle","Media","faFileAlt","faShoppingCart","App","Fragment","Home","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8XA0EeA,EA1DC,SAACC,GAAW,IAAD,EACGC,oBAAS,GADZ,mBAClBC,EADkB,KACVC,EADU,KAKzB,OACE,6BACE,kBAACC,EAAA,EAAD,CAAQC,MAAM,QAAQC,MAAI,EAACC,OAAO,KAAKC,OAAO,kBAAkBC,QAAQ,OAEtE,kBAACC,EAAA,EAAD,CAAeC,QANN,kBAAMR,GAAWD,MAO1B,kBAACU,EAAA,EAAD,CAAUV,OAAQA,EAAQW,QAAM,GAGhC,yBAAKC,MAAM,oBACX,0BAAMA,MAAM,UACR,2BAAOA,MAAM,GAAGC,KAAK,OAAOC,YAAY,WAAWC,KAAK,WACxD,kBAAC,IAAD,CAAiBC,KAAMC,QAOnB,kBAACC,EAAA,EAAD,CAAaC,KAAK,IAAIC,UAAU,gCAAgCC,MAAO,CAAEC,WAAY,SAAW,yBAAKC,GAAG,QAAO,kBAAC,IAAD,CAAiBP,KAAMQ,MAAS,0CAC/I,kBAACC,EAAA,EAAD,CAAKL,UAAU,qCAAqCT,QAAM,GAC5D,kBAACe,EAAA,EAAD,CAAsBC,KAAG,GACvB,kBAACC,EAAA,EAAD,CAAgBR,UAAU,OAAOO,KAAG,GAClC,kBAACE,EAAA,EAAD,CAAOT,UAAU,sBACf,0BAAMA,UAAU,oCAMhB,kBAACS,EAAA,EAAD,CAAOT,UAAU,0BACjB,kBAACF,EAAA,EAAD,CAAaE,UAAU,iCAAgC,yBAAKG,GAAG,QAAO,kBAAC,IAAD,CAAiBP,KAAMc,MAC3F,yBAAKP,GAAG,QAAR,YAGA,kBAACL,EAAA,EAAD,CAAaE,UAAU,iCAAgC,yBAAKG,GAAG,QAAO,kBAAC,IAAD,CAAiBP,KAAMe,MAC7F,yBAAKR,GAAG,QAAR,mBCzCPS,MAZf,WACE,OAEE,+BCgBWA,MAbf,WACE,OAEE,6BACA,kBAAC,IAAMC,SAAP,KACI,kBAAC,EAAD,MACA,kBAACC,EAAD,SCHYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.3db935e5.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport \"./Navbars.css\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faShoppingCart,faUser,faSearch, faFileAlt } from '@fortawesome/free-solid-svg-icons';\nimport {\n  Collapse,\n  Navbar,\n  NavbarToggler,\n  NavbarBrand,\n  Nav,\n  \n  UncontrolledDropdown,\n  DropdownToggle,\n \n  Media,\n} from 'reactstrap';\nconst Navbars = (props) => {\n  const [isOpen, setIsOpen] = useState(false);\n\n  const toggle = () => setIsOpen(!isOpen);\n\n  return (\n    <div>\n      <Navbar color=\"white\" dark expand=\"md\" border=\"solid 2px black\" padding=\"5px\">\n     \n        <NavbarToggler onClick={toggle} />\n        <Collapse isOpen={isOpen} navbar>\n          \n          {/* Form */}\n        <div class=\"search-container\" >\n        <form class=\"search\">\n            <input class=\"\" type=\"text\" placeholder=\"Search..\" name=\"search\"/>\n            <FontAwesomeIcon icon={faSearch}/>\n            \n        </form>\n        </div>\n         \n          \n               \n                <NavbarBrand href=\"/\" className=\"mb-0 text-sm font-weight-bold\" style={{ marginLeft: '10px' }} ><div id=\"text\"><FontAwesomeIcon icon={faUser}/><div>Account</div></div></NavbarBrand>\n                <Nav className=\"align-items-right d-none d-md-flex\" navbar>\n              <UncontrolledDropdown nav>\n                <DropdownToggle className=\"pr-0\" nav>\n                  <Media className=\"align-items-center\">\n                    <span className=\"avatar avatar-sm rounded-circle\">\n                    {/* <img\n                        alt=\"...\"\n                        src={require(\"./assets/img/theme/team-4-800x800.jpg\")}\n                      /> */}\n                    </span>\n                    <Media className=\"ml-2 d-none d-lg-block\">\n                    <NavbarBrand className=\"mb-0 text-sm font-weight-bold\"><div id=\"text\"><FontAwesomeIcon icon={faFileAlt}/>\n                      <div id=\"text\">Orders</div></div>\n                        \n                      </NavbarBrand>\n                      <NavbarBrand className=\"mb-0 text-sm font-weight-bold\"><div id=\"text\"><FontAwesomeIcon icon={faShoppingCart}/>\n                      <div id=\"text\">Cart</div></div>\n                        \n                      </NavbarBrand>\n                    </Media>\n                  </Media>\n                </DropdownToggle>\n                \n              </UncontrolledDropdown>\n            </Nav>\n              \n        </Collapse>\n      </Navbar>\n     \n        \n    </div>\n  );\n}\n\nexport default Navbars;","import React from \"react\";\nimport \"./Navbars.css\";\n\nfunction App() {\n  return (\n    \n    <div >\n       \n       \n        \n    </div>\n    \n  );\n}\n\nexport default App;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nimport Navbars from \"./components/Navbars\";\nimport Home from \"./components/Home\";\n\nimport './App.css';\n\nfunction App() {\n  return (\n   \n    <div>\n    <React.Fragment>\n        <Navbars />\n        <Home />\n      </React.Fragment>\n    </div>\n    \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}